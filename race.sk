import:
	org.bukkit.Bukkit	
	org.bukkit.Sound	
	org.bukkit.Material		
	org.bukkit.material.MaterialData	 		
	com.leaf.nbt.nbtapi.NBTItem
	com.leaf.nbt.nbtapi.NBTEntity	
	com.leaf.nbt.nbtapi.NBTContainer	
	fr.mrmicky.fastparticle.FastParticle
	fr.mrmicky.fastparticle.ParticleType	
	org.bukkit.event.player.PlayerInteractEvent
	org.bukkit.event.player.PlayerArmorStandManipulateEvent	

	
options:

	#do not touch this -_-
	plugin-version: 1.0.0

expression %item% with [custom] nbt %string%:
	return type: item
	get:
		if expr-1 = air:
			return
		set {_nbti} to new NBTItem(expr-1)
		{_nbti}.mergeCompound(new NBTContainer(expr-2))
		return {_nbti}.getItem()
		
#From https://forums.skunity.com/resources/mirrorutils.706/ by EWS
local expression replacer %texts% with %texts% in %text%:
	return type: text
	get:
		set {_result} to expr-3
		loop exprs-1:
			add 1 to {_n}
			replace all "%loop-value-1%" with ({_n}th element of exprs-2 ? "") in {_result}
		return {_result}	

local effect [leaf] hide %player% from %player%:
	trigger:
		expr-2.hidePlayer(expr-1)

local effect [leaf] show %player% to %player%:
	trigger:
		expr-2.showPlayer(expr-1)

command luckyrace [<text = help>] [<text>] [<text>] [<number>]:
	aliases: lr, race
	executable by: players
	trigger:
		if arg-1 is "help": 
			send centered "&7☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁" to player
			send "&a/luckyrace play"	
			if player has permission "luckyrace.start":		
				send "&a/luckyrace start"					
			send "&a/luckyrace leave"
			send centered "&7☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁" to player
			if player has permission "luckyrace.admin":	
				send centered "&7☁☁☁☁☁☁ &e&nGeneral Setup&r &7☁☁☁☁☁☁" to player															
				send "&e/luckyrace setLobby"				
				send "&e/luckyrace setWaitingLobby"						
				send centered "&7☁☁☁☁☁☁ &e&nMap Setup&r &7☁☁☁☁☁☁" to player					
				send "&e/luckyrace createMap &8(&7map_name&8)"								
				send "&e/luckyrace setPos &8(&7map_name&8) &8(&a1&7/&a2&8) "							
				send "&e/luckyrace setSpawn &8(&7map_name&8)"		
				send "&e/luckyrace saveMap &8(&7map_name&8)"							
				send "&e/luckyrace deleteMap &8(&7map_name&8)"
				send centered "&7☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁☁" to player
				stop
		if arg-1 is "play":		
			if {-race::cache::player::%player%::state} is not set:	
				race_play(player)				
		if arg-1 is "stats":		
			if {-race::cache::player::%player%::state} is not set:	
				open chest inventory with 1 rows named yaml value "Menus.Stats.Menu" from "leaf.race.config" to player
				wait a tick									
				set {_lore::*} to yaml list "Menus.Stats.Lore" from "leaf.race.config"
				loop "PlayedGames", "Wins", "Kills", "Loses", "BlocksDestroyed", "Checkpoints" and "BlocksPlaced":
					set {_int} to yaml value "Stats.%loop-value-1%" from "leaf.race.playerdata.%uuid of player%"
					replace all "{%loop-value-1%}" with "%{_int}%" in {_lore::*}
				make a gui slot 4 of player with paper named yaml value "Menus.Stats.Name" from "leaf.race.config" with lore colored {_lore::*} to do nothing								
		if arg-1 is "leave":	
			race_leave(player)
		if arg-1 is "start":	
			if player has permission "luckyrace.start":		
				race_generate_map({-race::cache::player::%player%::arena})		
		if arg-1 is "createMap":	
			if player has permission "luckyrace.admin":		
				if arg-2 is set:
					if yaml value "%arg-2%.State" from "leaf.race.maps" is not set:
						set yaml value "%arg-2%.State" from "leaf.race.maps" to "created"
						set yaml value "%arg-2%.IslandDistance" from "leaf.race.maps" to 50
						send "&cSetup &8- &aMap &c%arg-2% &ahas been created!"
						make player execute command "duels setSpawn %arg-2%"
						save yaml "leaf.race.maps"
					else:
						send "&aThis map already exists!"	
				else:
					send "&cMap not found."																				
		if arg-1 is "setSpawn":
			if player has permission "luckyrace.admin":		
				if yaml value "%arg-2%.State" from "leaf.race.maps" is "created" or "ready":
					set yaml value "%arg-2%.Spawn" from "leaf.race.maps" to location of player
					send "&cSetup &8- &aSpawn for Map &3%arg-2% &ahas been set!"			
					save yaml "leaf.race.maps"			
					stop					
				else:
					send "&cMap not found."	
		if arg-1 is "setPos" or "setPosition":
			if player has permission "luckyrace.admin":		
				if yaml value "%arg-2%.State" from "leaf.race.maps" is "created" or "ready":
					if arg-3 is "1" or "2":
						set yaml value "%arg-2%.Position.%arg-3%" from "leaf.race.maps" to location of player
						send "&cSetup &8- &aPosition &3%arg-3% &afor Map &3%arg-2% &ahas been set!"
					else:
						send "&cSetup &8- &a1 or 2!" 
				else:
					send "&cMap not found."																																																																																
		if arg-1 is "setLobby":	
			if player has permission "luckyrace.admin":
				set yaml value "Locations.Lobby" from "leaf.race.data" to location of player
				save yaml "leaf.race.data"
				send "&cSetup &8- &aLobby set."		
		if arg-1 is "setWaitingLobby":	
			if player has permission "luckyrace.admin":
				set yaml value "Locations.WaitingLobby" from "leaf.race.data" to location of player
				save yaml "leaf.race.config"
				send "&cSetup &8- &aWaiting Lobby set."																								
		if arg-1 is "reload":		
			if player has permission "luckyrace.admin":
				broadcast "&cSetup &8- &aReloading..."
				wait a tick
				make console execute command "sk reload %script%"
		if arg-1 is "saveMap":	
			if player has permission "luckyrace.admin":	
				if yaml value "%arg-2%.State" from "leaf.race.maps" is "ready":
					send "&cSetup &8- &aThis map is already created, saving the changes if there's any..." 
					set yaml value "%arg-2%.State" from "leaf.race.maps" to "created"
					make player execute command "duels saveMap %arg-2%"
					stop			
				if yaml value "%arg-2%.State" from "leaf.race.maps" is "created":
					if yaml value "%arg-2%.Position.1" from "leaf.race.maps" is set:
						if yaml value "%arg-2%.Position.2" from "leaf.race.maps" is set:
							if yaml value "%arg-2%.Spawn" from "leaf.race.maps" is set:
								set yaml value "%arg-2%.State" from "leaf.race.maps" to "ready"
								add arg-2 to {-race::cache::maps::*}
								save yaml "leaf.race.maps"
								save schematic "plugins/LuckyRace/maps/%arg-2%.schem" from yaml value "%arg-2%.Position.1" from "leaf.race.maps" and yaml value "%arg-2%.Position.2" from "leaf.race.maps"
								send "&cSetup &8- &aMap &c%arg-2% &ahas been saved."
							else:
								send "&cSetup &8- &aSpawn is not set!" 							
						else:
							send "&cSetup &8- &aPosition 2 is not set!"								
					else:
						send "&cSetup &8- &aPosition 1 is not set!" 																																																																																																																								
				else:
					send "&cSetup &8- &aYou didn't created this arena yet."
		if arg-1 is "debug":	
			if player has permission "luckyrace.admin":
				send "&fArena: &a%{-race::cache::player::%player%::arena}%"	
				send "&fStatus: &a%{-race::cache::arena::%{-race::cache::player::%player%::arena}%::status}%"	
				send "&fPlayers: &a%size of {-race::cache::arena::%{-race::cache::player::%player%::arena}%::ninjas::*}%"	
				loop "Red" and "Blue":
					send "&aTeam <%loop-value-1%>%loop-value-1%, &fPlayers: &c%{-race::cache::arena::%{-race::cache::player::%player%::arena}%::team::%loop-value-1%::*}%"
		if arg-1 is "deleteMap":	
			if player has permission "luckyrace.admin":		
				if yaml value "%arg-2%.State" from "leaf.race.maps" is set:
					delete yaml value arg-2 from "leaf.race.maps"					
					send "&cSetup &8- &aMap &c%arg-2% &ahas been deleted."
					save yaml "leaf.race.maps"
				else:
					send "&cMap not found."
	
function race_stats(p: player, do: text, type: text = "check", amount: number = 1):
	if yaml "leaf.race.playerdata.%uuid of {_p}%" is not loaded:
		load yaml "plugins/LuckyRace/playerdata/%uuid of {_p}%.yml" as "leaf.race.playerdata.%uuid of {_p}%"	
	{_do} is "check":
		loop "PlayedGames", "Wins", "Kills", "Loses", "BlocksPlaced" and "BlocksDestroyed": 
			if yaml value "Stats.%loop-value-1%" from "leaf.race.playerdata.%uuid of {_p}%" is not set:
				set yaml value "Stats.%loop-value-1%" from "leaf.race.playerdata.%uuid of {_p}%" to 0
	{_do} is "add":
		set yaml value "Stats.%{_type}%" from "leaf.race.playerdata.%uuid of {_p}%" to yaml value "Stats.%{_type}%" from "leaf.race.playerdata.%uuid of {_p}%" + {_amount}
	save yaml "leaf.race.playerdata.%uuid of {_p}%"

function race_leave(p: player):
	if {-race::cache::player::%{_p}%::state} is set:
		if {-race::cache::player::%{_p}%::state} is "IN-GAME":		
			race_remove_from_game({_p}, true)
			send replacer "{player}" with {_p}'s display name in yaml value "Messages.Leave" from "leaf.race.config" to {-race::cache::arena::%{-race::cache::player::%{_p}%::arena}%::ninjas::*}		
		race_clear_player({_p})
		delete scoreboard of {_p}
		teleport {_p} to yaml value "Locations.Lobby" from "leaf.race.data"		
	delete {-race::cache::player::%{_p}%::*}		

function race_play_sound(p: player, soundLegacy: string, soundNew: string):
	if {-race::cache::sounds::%{_soundLegacy}%} is not set:
		if minecraft version contains "1.8":
			set {-race::cache::sounds::%{_soundLegacy}%} to Sound..{_soundLegacy}
		else:
			set {-race::cache::sounds::%{_soundLegacy}%} to Sound..{_soundNew}
	else:	
		{_p}.playSound(location of {_p}, {-mb::cache::sounds::%{_soundLegacy}%}, 1 and 1)	

function race_clear_player(p: player):						
	heal {_p}
	extinguish {_p}
	set {_p}'s food to 20	
	clear {_p}'s level
	clear {_p}'s inventory
	{_p}.setFlying(false)
	{_p}.setAllowFlight(false)	
	set {_p}'s gamemode to survival
	loop ...{_p}.getActivePotionEffects():
		{_p}.removePotionEffect(loop-value.getType())	
	set velocity of {_p} to new vector 0, 0, 0	
	#
	set {_p}'s helmet to air	
	set {_p}'s chestplate to air
	set {_p}'s leggings to air
	set {_p}'s boots to air		
	set cursor slot of {_p} to air
	close {_p}'s inventory
	#	
	delete metadata value "RACE_DEAD" of {_p}
	delete metadata value "RACE_KILLER" of {_p}

function race_start_countdown(arena: text):
	set {-race::cache::arena::%{_arena}%::status} to "STARTING"
	set {-race::cache::arena::%{_arena}%::seconds} to 30
	loop {-race::cache::arena::%{_arena}%::seconds} times:
		if {-race::cache::arena::%{_arena}%::status} is "STARTING" or "WAITING":
			size of {-race::cache::arena::%{_arena}%::ninjas::*} >= 2
			remove 1 from {-race::cache::arena::%{_arena}%::seconds}	
			if {-race::cache::arena::%{_arena}%::seconds} = 1 or 2 or 3 or 4 or 5 or 10:
				send replacer "{seconds}" with "%{-race::cache::arena::%{_arena}%::seconds}%" in yaml value "Messages.Starting" from "leaf.mb.config" to {-race::cache::arena::%{_arena}%::ninjas::*}	
			if {-race::cache::arena::%{_arena}%::seconds} = 1:
				size of {-race::cache::arena::%{_arena}%::ninjas::*} >= 3:
					race_generate_map({_arena})
				else:
					set {-race::cache::arena::%{_arena}%::status} to "WAITING"
					set {-race::cache::arena::%{_arena}%::seconds} to 30
			wait a second			
		else:
			stop

function race_join_arena(p: player, arena: text):
	set {-race::cache::player::%{_p}%::state} to "IN-GAME"
	set {-race::cache::player::%{_p}%::arena} to {_arena}
	add {_p} to {-race::cache::arena::%{_arena}%::ninjas::*}
	teleport {_p} to yaml value "Locations.WaitingLobby" from "leaf.race.data"
	race_createBoard({_p}, "RACE-WAITING")	
	if {-race::cache::arena::%{_arena}%::status} is "WAITING":
		if size of {-race::cache::arena::%{_arena}%::ninjas::*} = 3:
			race_start_countdown({_arena})
	#Separe players.
	loop all players:	
		if {-race::cache::player::%{_p}%::arena} is {-race::cache::player::%loop-value-1%::arena}:
			leaf show {_p} to loop-value-1
			leaf show loop-value-1 to {_p}
		else:
			leaf hide {_p} from loop-value-1
			leaf hide loop-value-1 from {_p}
		wait a tick	

function race_play(p: player):
	loop {-race::arenas::*}:
		if {-race::cache::arena::%loop-value-1%::status} is "STARTING" or "WAITING":
			race_join_arena({_p}, loop-value-1)
			stop
	send "&eNo arenas found, creating one right now..." to {_p}
	loop 1000 times:
		if {-race::cache::arena::%loop-value-1%::status} is not set:
			set {_arena} to "%loop-value-1%"
			set {-race::cache::arena::%{_arena}%::status} to "WAITING"	
			set {-race::cache::arena::%{_arena}%::GameMap} to a random element out of {-race::cache::maps::*}
			set {-race::cache::arena::%{_arena}%::maxPlayers} to 30
			race_join_arena({_p}, {_arena})
			add "%loop-value-1%" to {-race::arenas::*}
			stop loop
	loop 1000 times:
		set {_PasteCoords} to loop-number*1000
		if {-race::cache::ArenaGenerator::Region::%{_PasteCoords}%} is not set:
			set {-race::cache::arena::%{_arena}%::PasteCoords} to {_PasteCoords}
			set {-race::cache::ArenaGenerator::Region::%{_PasteCoords}%} to true
			stop loop				
			
function race_generate_map(arena: text):
	#Generating arena...
	set {_distance} to yaml value "%{_arena}%.IslandDistance" from "leaf.race.maps"
	set {-race::cache::arena::%{_arena}%::Position1} to yaml value "%{-race::cache::arena::%{_arena}%::GameMap}%.Position.1" from "leaf.race.maps"
	set {-race::cache::arena::%{_arena}%::Position2} to yaml value "%{-race::cache::arena::%{_arena}%::GameMap}%.Position.2" from "leaf.race.maps"
	set {-race::cache::arena::%{_arena}%::Spawn} to yaml value "%{-race::cache::arena::%{_arena}%::GameMap}%.Spawn" from "leaf.race.maps"
	add {_PasteCoords} to x-coords of {-race::cache::arena::%{_arena}%::Spawn}

	add {_PasteCoords} to x-coords of {-race::cache::arena::%{_arena}%::Position1}
	add {_PasteCoords} to x-coords of {-race::cache::arena::%{_arena}%::Position2}

	paste schematic "plugins/LuckyRace/maps/%{-race::cache::arena::%{_arena}%::GameMap}%.schem" at {-race::cache::arena::%{_arena}%::Position1}
	#Generating arena...	

	set {-race::cache::arena::%{_arena}%::MaxHeight} to y-coords of {-race::cache::arena::%{_arena}%::Spawn} + yaml value "Settings.MaxHeight" from "leaf.race.config"
	
	set {_spawnLoc} to {-race::cache::arena::%{_arena}%::Position1}

	loop {-race::cache::arena::%{_arena}%::ninjas::*}:
	
		set {-race::cache::player::%loop-value-1%::spawn} to {-race::cache::arena::%{_arena}%::Spawn}
		set {-race::cache::player::%loop-value-1%::checkpoints} to 0

		#must be same value({_distance}).
		add {_distance} to x-coords of {-race::cache::arena::%{_arena}%::Spawn}
		add {_distance} to x-coords of {_spawnLoc}
		add {_distance} to x-coords of {-race::cache::arena::%{_arena}%::Position2}
		#
		paste schematic "plugins/LuckyRace/maps/%{-race::cache::arena::%{_arena}%::GameMap}%.schem" at {_spawnLoc}
		wait a tick

	race_start({_arena})	
	
function race_start(arena: text):
	set {-race::cache::arena::%{_arena}%::status} to "IN-GAME"
	race_gametime({_arena})
	wait a second
	loop {-race::cache::arena::%{_arena}%::ninjas::*}:
		set {-race::cache::player::%loop-value-1%::GameKills} to 0	
		set metadata value "RACE_OWNER" of loop-value-1 to loop-value-1
		teleport loop-value-1 to {-race::cache::player::%loop-value-1%::spawn}
		race_createBoard(loop-value-1, "RACE-GAME")
		race_stats(loop-value-1, "add", "PlayedGames")	
	loop 4 times:	
		loop {-race::cache::arena::%{_arena}%::ninjas::*}:
			set {_title} to ""
			set {_subtitle} to ""		
			if loop-number = 1:
				set {_title} to "&c&n3"		
			if loop-number = 2:
				set {_title} to "&6&n2"		
			if loop-number = 3:
				set {_title} to "&e&n1"	
			if loop-number = 4:
				set {_title} to "&aGo!"		
				race_play_sound(loop-value-2, "LEVEL_UP", "ENTITY_PLAYER_LEVELUP")
			else:
				race_play_sound(loop-value-2, "NOTE_BASS", "BLOCK_NOTE_BLOCK_BASS")			
		#	loop-number != 2 or 3 or 4 or 5										
			leaf send title {_title} with subtitle {_subtitle} to loop-value-2 with 5 fadein and 5 fadeout for 20
		wait a second	
			

on quit:
	if {-race::cache::player::%player%::state} is set:
		race_leave(player)
	unload yaml "leaf.race.playerdata.%uuid of player%"	
	delete {-race::cache::player::%player%::*}

on teleport:
	if {-race::cache::player::%player%::state} is set:
		"%teleport cause%" is "SPECTATE"
		cancel event	

on break:
	if {-race::cache::player::%player%::state} is "IN-GAME":
		if {-race::cache::arena::%{-race::cache::player::%player%::arena}%::status} is "IN-GAME":
			if {-race::cache::arena::%{-race::cache::player::%player%::arena}%::OMAE-MO-SHINDEIRU::%location of event-block%} is set:
				race_stats(player, "add", "BlocksDestroyed")
				stop	
			else:
				cancel event
		else:
			cancel event

on place:
	if {-race::cache::player::%player%::state} is "IN-GAME":	
		if {-race::cache::arena::%{-race::cache::player::%player%::arena}%::status} is "IN-GAME":
			if y-coords of event-block >= {-race::cache::arena::%{-race::cache::player::%player%::arena}%::MaxHeight}:
				cancel event
				stop
			race_stats(player, "add", "BlocksPlaced")
			if {-race::cache::arena::%{-race::cache::player::%player%::arena}%::OMAE-MO-SHINDEIRU::%location of event-block%} is not set:
				set {-race::cache::arena::%{-race::cache::player::%player%::arena}%::OMAE-MO-SHINDEIRU::%location of event-block%} to location of event-block
		else:
			cancel event
			
on PlayerArmorStandManipulateEvent:
	if {-race::cache::player::%event.getPlayer()%::state} is set:	
		cancel event

on PlayerInteractEvent:
	if {-race::cache::player::%event.getPlayer()%::state} is set:	
		if "%event.getAction()%" is "PHYSICAL":
			cancel event

on chat:
	if {-race::cache::player::%player%::state} is set:
		set {_format} to replacer "{player}" and "{message}" with "%player%" and message in yaml value "Settings.ChatFormat" from "leaf.race.config"
		loop "PlayedGames", "Wins", "Kills", "Loses", "BlocksDestroyed" and "BlocksPlaced":
			set {_int} to yaml value "Stats.%loop-value-1%" from "leaf.race.playerdata.%uuid of player%"
			replace all "{%loop-value-1%}" with "%{_int}%" in {_format}
		set chat format to {_format}
		set chat recipients to {-race::cache::arena::%{-race::cache::player::%player%::arena}%::ninjas::*}

on drop:
	if {-race::cache::player::%player%::state} is "IN-GAME":
		cancel event

on hunger bar change:	
	if {-race::cache::player::%player%::state} is "IN-GAME":
		if {-race::cache::arena::%{-race::cache::player::%player%::arena}%::status} is "IN-GAME":
			stop
		set player's hunger to 20

function race_gametime(arena: text):	
	set {-race::cache::arena::%{_arena}%::minutes} to 9
	set {-race::cache::arena::%{_arena}%::seconds} to 60
	while {-race::cache::arena::%{_arena}%::status} is "IN-GAME":
		remove 1 from {-race::cache::arena::%{_arena}%::seconds}
		if {-race::cache::arena::%{_arena}%::seconds} is 0:
			set {-race::cache::arena::%{_arena}%::seconds} to 59				
			remove 1 from {-race::cache::arena::%{_arena}%::minutes}				
		if {-race::cache::arena::%{_arena}%::minutes} = 0:
			if {-race::cache::arena::%{_arena}%::seconds} <= 1:	
				race_resetarena({_arena})	
				stop
		wait a second

function race_show_blood(p: player):
	if {-race::cache::player::%{_p}%::state} is set:
		set {_w} to world of {_p}
		set {_loc} to location of {_p}
		set {_material} to new MaterialData(Material.."REDSTONE_BLOCK")
		FastParticle.spawnParticle({_w}, ParticleType.BLOCK_CRACK, {_loc}, 3 and {_material})

function race_win(p: player, arena: text):
	set {-race::cache::arena::%{_arena}%::status} to "RESTARTING"
	loop yaml list "Messages.Summary" from "leaf.race.config":
		set {_msg} to loop-value-1
		replace all "{PlayerList}" with "%{_p}%" in {_msg}
		send centered colored {_msg} to {-race::cache::arena::%{_arena}%::ninjas::*}
	race_stats({_p}, "add", "Wins")
	loop 10 times:
		wait a second
	race_resetarena({_arena})

function race_remove_from_game(p: player, quit: boolean = false):
	set {_arena} to {-race::cache::player::%{_p}%::arena}
	remove {_p} from {-race::cache::arena::%{_arena}%::ninjas::*}
	if size of {-race::cache::arena::%{_arena}%::ninjas::*} = 0 or 1:
		if {-race::cache::arena::%{_arena}%::status} = "IN-GAME":
			set {_result} to random element out of {-race::cache::arena::%{_arena}%::ninjas::*}
			race_win({_result}, {_arena})
			stop
		if {-race::cache::arena::%{_arena}%::status} != "RESTARTING":
			race_resetarena({_arena})	

function race_player_death(p: player):
	if metadata value "RACE_DEAD" of {_p} is set:
		stop
	set metadata value "RACE_DEAD" of {_p} to true
	race_show_blood({_p})
	create lightning effect at {_p}
	set {_killer} to "%metadata value ""RACE_KILLER"" of {_p}%" parsed as player
	set {_p}'s gamemode to spectator	
	FastParticle.spawnParticle({_p}.getWorld(), ParticleType.EXPLOSION_NORMAL, {_p}.getLocation() and 1)
	race_stats({_p}, "add", "Loses")
	if {_killer} is set:
		race_stats({_killer}, "add", "Kills")
		add 1 to {-race::cache::player::%{_killer}%::GameKills}
		send replacer "{victim}" and "{killer}" with "%{_p}%" and "%{_killer}%" in yaml value "Messages.Killed" from "leaf.race.config" to {-race::cache::arena::%{-race::cache::player::%{_p}%::arena}%::ninjas::*}
	else:
		send replacer "{victim}" with "%{_p}%" and "%{_victimColor}%" in yaml value "Messages.Death" from "leaf.race.config" to {-race::cache::arena::%{-race::cache::player::%{_p}%::arena}%::ninjas::*}
	loop {-race::cache::arena::%{-race::cache::player::%{_p}%::arena}%::ninjas::*}:
		if metadata value "RACE_KILLER" of loop-value-1 is "%{_p}%":
			delete metadata value "RACE_KILLER" of loop-value-1
	race_clear_player({_p})			
	teleport {_p} to {-race::cache::player::%{_p}%::spawn}
	#race_remove_from_game({_p})
	
on damage of player:
	if {-race::cache::player::%victim%::state} is "IN-GAME":
		if {-race::cache::arena::%{-race::cache::player::%victim%::arena}%::status} is "IN-GAME":			
			race_show_blood(victim)
			set metadata value "RACE_KILLER" of victim to metadata value "RACE_OWNER" of attacker	
			if damage cause is void:
				cancel event	
				race_player_death(victim)
				stop						
			if damage >= health of victim:
				cancel event	
				race_player_death(victim)
		else:
			cancel event 							

function race_resetarena(arena: text):
	set {-race::cache::arena::%{_arena}%::status} to "RESTARTING"
	loop {-race::cache::arena::%{_arena}%::ninjas::*}:
		teleport loop-value-1 to yaml value "Locations.Lobby" from "leaf.race.data"
		delete scoreboard of loop-value-1		
		delete {-race::cache::player::%loop-value-1%::*}				
		race_clear_player(loop-value-1)	
		wait a tick	
	remove {_arena} from {-race::arenas::*}
	#Free Region	
	replace blocks between {-race::cache::arena::%{_arena}%::Position1} and {-race::cache::arena::%{_arena}%::Position2} with air
	wait a second	
	delete {-race::cache::ArenaGenerator::Region::%{-race::cache::arena::%{_arena}%::PasteCoords}%}	
	#Free Region		
	delete {-race::cache::arena::%{_arena}%::*}		

function race_createBoard(p: player, t: text):
	set {_arena} to {-race::cache::player::%{_p}%::arena}
	create scoreboard for {_p}
	if {_t} is "RACE-WAITING":
		set scoreboard title of {_p} to yaml value "Scoreboard.Waiting.Name" from "leaf.race.config"
		while {-race::cache::player::%{_p}%::arena} = {_arena}:	
			if {-race::cache::arena::%{-race::cache::player::%{_p}%::arena}%::status} = "STARTING" or "WAITING":
				set {_slot} to 1
				set {_status} to yaml value "Scoreboard.Waiting.%{-race::cache::arena::%{_arena}%::status}%" from "leaf.race.config"				
				replace all "{seconds}" with "%{-race::cache::arena::%{_arena}%::seconds}%" in {_status}	
				loop yaml list "Scoreboard.Waiting.Lines" from "leaf.race.config":
					set {_value} to "%loop-value-1%"
					replace all "{now}" with "%now%" in {_value}
					replace all "{player}" with {_p}'s display name in {_value}
					replace all "{status}" with {_status} in {_value}					
					replace all "{players}" with "%size of {-race::cache::arena::%{_arena}%::ninjas::*}%" in {_value}
					replace all "{maxplayers}" with "%{-race::cache::arena::%{_arena}%::maxPlayers}%" in {_value}
					replace all "{arena}" with "%{-race::cache::player::%{_p}%::arena}%" in {_value}
					replace all "{status}" with {_status} in {_value}
					set scoreboard line {_slot} of {_p} to colored "%{-race::cache::SB::%{_slot}%}%%colored {_value}%"
					add 1 to {_slot}
			else:
				stop
			wait a second		
	if {_t} is "RACE-GAME":
		set scoreboard title of {_p} to yaml value "Scoreboard.Game.Name" from "leaf.race.config"
		while {-race::cache::player::%{_p}%::arena} = {_arena}:	
			if {-race::cache::arena::%{-race::cache::player::%{_p}%::arena}%::status} is "IN-GAME":	
				set {_slot} to 1 
				loop yaml list "Scoreboard.Game.Lines" from "leaf.race.config":
					set {_value} to "%loop-value-1%"
					replace all "{now}" with "%now%" in {_value}
					replace all "{player}" with {_p}'s display name in {_value}		
					replace all "{map}" with "%{-race::cache::arena::%{_arena}%::GameMap}%" in {_value}					
					replace all "{checkpoints}" with "%{-race::cache::player::%{_p}%::checkpoints}%" in {_value}												
					if {-race::cache::arena::%{_arena}%::seconds} <= 9:	
						replace all "{game-time}" with "%{-race::cache::arena::%{_arena}%::minutes}%:0%{-race::cache::arena::%{_arena}%::seconds}%" in {_value}
					if {-race::cache::arena::%{_arena}%::seconds} > 9:
						replace all "{game-time}" with "%{-race::cache::arena::%{_arena}%::minutes}%:%{-race::cache::arena::%{_arena}%::seconds}%" in {_value}										
					set scoreboard line {_slot} of {_p} to colored "%{-race::cache::SB::%{_slot}%}%%{_value}%"
					add 1 to {_slot}
			else:
				stop							
			wait a second	

function race_check_yaml(dir: text, value: text, set: text, type: text = "text"):
	yaml value {_value} from "leaf.race.%{_dir}%" is not set:
		if {_type} is "text":
			set yaml value {_value} from "leaf.race.%{_dir}%" to {_set}
		if {_type} is "number":
			set yaml value {_value} from "leaf.race.%{_dir}%" to {_set} parsed as number
		if {_type} is "boolean":
			set yaml value {_value} from "leaf.race.%{_dir}%" to {_set} parsed as boolean
	if {_type} is "list":
		yaml list {_value} from "leaf.race.%{_dir}%" is not set
		loop {_set} split at "||":
			add loop-value to yaml list {_value} from "leaf.race.%{_dir}%"

on load:
	loop {-race::arenas::*}:
		race_resetarena(loop-value-1)
		wait a second
	loop all players:
		if {-race::cache::player::%loop-value-1%::state} is set:
			add loop-value-1 to {_backup::*}
			wait a tick
	loop currently loaded yaml files:
		loop-value contains "leaf.race.config" or "leaf.race.playerdata" or "leaf.race.maps"  
		unload yaml loop-value-1	
	delete {-race::cache::*}				
	loop "config" and "data":
		load yaml "plugins/LuckyRace/%loop-value-1%.yml" as "leaf.race.%loop-value-1%"		
	load yaml "plugins/LuckyRace/maps/maps.yml" as "leaf.race.maps"			
	race_check_yaml("config", "Settings.ChatFormat", "&a{Wins} &8✦ &7{player} &8» &7{message}")														
	race_check_yaml("config", "Settings.MaxHeight", "60", "number")														
	race_check_yaml("config", "Menus.Stats.Menu", "&8︼︼ &7LuckyRace Stats &8︼︼")		
	race_check_yaml("config", "Menus.Stats.Name", "&8➭ &e&nYour Stats&r")	
	race_check_yaml("config", "Menus.Stats.Lore", "||&8♦ &7PlayedGames &a{PlayedGames}||&8♦ &7Wins &a{Wins}||&8♦ &7Kills &a{Kills}||&8♦ &7Checkpoints &a{checkpoints}||&8♦ &7Deaths &a{Loses}||&8♦ &7BlocksPlaced &a{BlocksPlaced}||&8♦ &7BlocksDestroyed &a{BlocksDestroyed}", "list")			
	race_check_yaml("config", "Scoreboard.Waiting.Name", "&eLucky Race")	
	race_check_yaml("config", "Scoreboard.Waiting.WAITING", "&aWaiting for players...")	
	race_check_yaml("config", "Scoreboard.Waiting.STARTING", "&aStarting in: &7{seconds}...")		
	race_check_yaml("config", "Scoreboard.Waiting.Lines", "&7{now}||||&8♦ &fArena: &a{arena}||||&8♦ &fPlayers: &a{players}/{maxplayers}||||{status}||||&b㋡ &e&nMC.SERVER.NET&r &b㋡", "list")	
	race_check_yaml("config", "Scoreboard.Game.Name", "&eLucky Race") 	
	race_check_yaml("config", "Scoreboard.Game.Lines", "&7{now}||||&7❒ &fTime Left ⤵||&8➥ &a{game-time}||||&7❒ &fMap ⤵||&8➥ &7{map}||||&7❒ &c❤ ⤵||&8➥ &a&7Unlimited.||||&7❒ &fCheckpoins &7⤵||&8➥ &a&7{checkpoints}||||&eplay.my-cool-server.net", "list")		
	race_check_yaml("config", "Messages.ArenaFound", "&a➜ &7Found Arena.")		
	race_check_yaml("config", "Messages.SearchingArena", "&c➜ &7Searching Arena...")		
	race_check_yaml("config", "Messages.AlreadySearching", "&c➜ &7You are already searching for a game.")	
	race_check_yaml("config", "Messages.Join", "&7{player} &ehas joined to the game.")	
	race_check_yaml("config", "Messages.Leave", "&7{player} &eleft the game.")
	race_check_yaml("config", "Messages.Death", "&c➜ {victim} &7died")	
	race_check_yaml("config", "Messages.Killed", "&c➜ {victim} &7was killed by {killer}")		
	race_check_yaml("config", "Messages.Starting", "&eThe game starts in &a{seconds} &eseconds")	
	race_check_yaml("config", "Messages.AlreadyPlaying", "&eYou are already playing!")		
	race_check_yaml("config", "Messages.Summary", "&a︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼︼||||&e✦ &6Lucky Race &e✦||||&7Winner &8➭ {PlayerList}||||&a︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻︻", "list")			
	loop yaml nodes with keys "" from "leaf.race.maps":
		if yaml value "%loop-value-1%.State" from "leaf.race.maps" is "ready":
			add loop-value-1 to {-race::cache::maps::*}		
	set {-race::cache::Items::Cancel} to yaml value "Menus.Play.Cancel.Item" from "leaf.race.config" parsed as material named yaml value "Menus.Play.Cancel.Name" from "leaf.race.config"
	set {-race::cache::SB::*} to "&a", "&b", "&c", "&d", "&e", "&1", "&2", "&3", "&4", "&5", "&6", "&7", "&8", "&9" and "&f"
	send "&7&l--------------------------------------------" to console
	send " " to console
	send "&aLoading &ev.{@plugin-version}&a..." to console
	broadcast "&aLuckyRace loaded!"
	send " " to console
	send "&7&l--------------------------------------------" to console	
	if yaml value "Locations.Lobby" from "leaf.race.data" is not set:
		broadcast "&cSetup &8- &a&cLuckyRace lobby is not set!."	
	loop "config" and "maps":	
		save yaml "leaf.race.%loop-value-1%"	
	loop all players:
		race_stats(loop-value-1, "check")	
	loop {_backup::*}:
		race_clear_player(loop-value-1)		
		delete scoreboard of loop-value-1			
		teleport loop-value-1 to yaml value "Locations.Lobby" from "leaf.race.data"						
		wait a tick


on unload:
	send "&7&l--------------------------------------------" to console
	send " " to console
	send "&aDisabling &ev.{@plugin-version}&a..." to console
	send "&ev.{@plugin-version} &adisabled!" to console
	send " " to console
	send "&7&l--------------------------------------------" to console				

#El Psy Kongroo